class Ship : Actor {
  bool falling;
  Vector2 movement;
  float throttle;
  float throttleDelta;
  int forwardAngle;
  bool movingLeft;
  bool movingRight;
  bool throttleIncreasing;
  bool throttleDecreasing;

  Default {
    +NOGRAVITY;
  }

  States {
    Spawn:
      Goto Ready;
      stop;
    Ready:
      SKYA A 3;
      SKYA B 3;
      SKYA C 3;
      SKYA D 3;
      loop;
  }

  override void PostBeginPlay() {
    movement = (0,0);
    throttle = 0.0;
    throttleDelta = 0.0;
    falling = true;
    forwardAngle = angle;
    movingLeft = false;
    movingRight = false;
    throttleIncreasing = false;
    throttleDecreasing = false;
  }

  void mLeft(bool a) {
    movingLeft = a;
    setMovement();
  }
  void mRight(bool a) {
    movingRight = a;
    setMovement();
  }
  void throttleInc(bool a) {
    throttleIncreasing = a;
    setThrottle();
  }
  void throttleDec(bool a) {
    throttleDecreasing = a;
    setThrottle();
  }

  void setMovement() {
    float xspd = 0;
    if (movingLeft) {
      xspd -= 3;
    }
    if (movingRight) {
      xspd += 3;
    }
    movement = (xspd, movement.y);
  }

  void setThrottle() {
    float throttle = 0;
    if (throttleIncreasing) {
      throttle += 3;
    }
    if (throttleDecreasing) {
      throttle -= 3;
    }
    throttleDelta = throttle;
  }

  void jump() {
    if (falling == false) {
      movement = (movement.x, -15.0);
      falling = true;
    }
  }

  override void Tick() {
    Super.Tick();

    throttle = throttle + throttleDelta;
    if (throttle > 100) {
      throttle = 100;
    }
    if (throttle < 0) {
      throttle = 0;
    }

    // Console.Printf("Throttle: %f, ThrottleDelta: %f", throttle, throttleDelta);

    if (falling) {
      movement = (movement.x, movement.y + 0.8);
    }

    FLineTraceData RemoteRay;
    bool b = false;
    b = self.LineTrace(
      angle,
      256,
      90,
      TRF_THRUACTORS | TRF_NOSKY,
      offsetz: 0.3,
      data: RemoteRay
    );
    if (b && RemoteRay.HitType == TRACE_HitFloor)
    {
      float zoffset = pos.z - RemoteRay.HitLocation.z;
      // Console.Printf("%f", RemoteRay.HitLocation.z);
      if (zoffset < movement.y) {
        movement = (movement.x, 0);
        SetXYZ((pos.x, pos.y, RemoteRay.HitLocation.z));
        falling = false;
      }
    }

    SetXYZ((pos.x + (Sin(forwardAngle) * movement.x) + (Cos(forwardAngle) * throttle / 20), pos.y - (Cos(forwardAngle) * movement.x) + (Sin(forwardAngle) * throttle / 20), pos.z - movement.y));

    PlayerInfo p = players[consoleplayer];
    p.mo.SetXYZ((pos.x - (Cos(forwardAngle) * 200), pos.y - (Sin(forwardAngle) * 200), 0));
  }
}