class Ship : Actor {
  bool falling;
  Vector2 movement;
  float throttle;
  float throttleDelta;
  int forwardAngle;
  bool movingLeft;
  bool movingRight;
  bool throttleIncreasing;
  bool throttleDecreasing;
  Vector3 initialPosition;

  Default {
    +NOGRAVITY;
  }

  States {
    Spawn:
      Goto Ready;
      stop;
    Ready:
      SKYA A 3;
      SKYA B 3;
      SKYA C 3;
      SKYA D 3;
      loop;
    Kaboom:
      SBOO A 4 A_PlayWeaponSound("SBOOM");
      SBOO B 4;
      SBOO C 4;
      SBOO D 4;
      SBOO E 4;
      SBOO F 4;
      SBOO G 4;
      TNT1 A 20;
      TNT1 A 0 {
        Actor ship = Spawn("Ship", self.initialPosition);
        self.Destroy();
      }
      stop;
  }

  override void PostBeginPlay() {
    initialPosition = self.pos;
    movement = (0,0);
    throttle = 0.0;
    throttleDelta = 0.0;
    falling = true;
    forwardAngle = angle;
    movingLeft = false;
    movingRight = false;
    throttleIncreasing = false;
    throttleDecreasing = false;
  }

  void mLeft(bool a) {
    if (InStateSequence(CurState, ResolveState("Ready"))) {
      movingLeft = a;
      setMovement();
    }
  }
  void mRight(bool a) {
    if (InStateSequence(CurState, ResolveState("Ready"))) {
      movingRight = a;
      setMovement();
    }
  }
  void throttleInc(bool a) {
    if (InStateSequence(CurState, ResolveState("Ready"))) {
      throttleIncreasing = a;
      setThrottle();
    }
  }
  void throttleDec(bool a) {
    if (InStateSequence(CurState, ResolveState("Ready"))) {
      throttleDecreasing = a;
      setThrottle();
    }
  }

  void setMovement() {
    float xspd = 0;
    if (movingLeft) {
      xspd -= 5;
    }
    if (movingRight) {
      xspd += 5;
    }
    movement = (xspd, movement.y);
  }

  void setThrottle() {
    float throttle = 0;
    if (throttleIncreasing) {
      throttle += 3;
    }
    if (throttleDecreasing) {
      throttle -= 3;
    }
    throttleDelta = throttle;
  }

  void jump() {
    if (falling == false) {
      movement = (movement.x, -9.0);
      falling = true;
    }
  }
  
  void kaboom() {
    if (!InStateSequence(CurState, ResolveState("Kaboom"))) {
      SetState(ResolveState("Kaboom"));
    }
  }

  override void Tick() {
    Super.Tick();

    throttle = throttle + throttleDelta;
    if (throttle > 300) {
      throttle = 300;
    }
    if (throttle < 0) {
      throttle = 0;
    }

    // Console.Printf("Throttle: %f, ThrottleDelta: %f", throttle, throttleDelta);

    if (falling) {
      movement = (movement.x, movement.y + 0.8);
    }

    bool hitFront = pos.z - self.getZAt(20, 0) < -10;
    bool hitLeft = pos.z - self.getZAt(0, -20) < -10;
    bool hitRight = pos.z - self.getZAt(0, 20) < -10;

    float hitz = self.GetZAt(0, 0);
    hitz = max(hitz, self.GetZAt(-20, 0));
    hitz = max(hitz, self.GetZAt(20, 0));
    hitz = max(hitz, self.GetZAt(0, -20));
    hitz = max(hitz, self.GetZAt(0, 20));

    float zoffset = pos.z - hitz; //pos.z - RemoteRay.HitLocation.z;

    if (hitFront) {
      throttle = 0;
    }

    if (hitLeft) {
      movement = (max(0, movement.x), 0);
    }

    if (hitRight) {
      movement = (min(0, movement.x), 0);
    }

    if (zoffset > -10 && zoffset < movement.y) {
      movement = (movement.x, 0);
      SetOrigin((pos.x, pos.y, hitz), true);
      falling = false;
    } else if (zoffset > 0.1) {
      falling = true;
    }

    if (self.pos.z < -50) {
      self.kaboom();
    }

    SetOrigin((pos.x + (Sin(forwardAngle) * movement.x) + (Cos(forwardAngle) * throttle / 20), pos.y - (Cos(forwardAngle) * movement.x) + (Sin(forwardAngle) * throttle / 20), pos.z - movement.y), true);

    PlayerInfo p = players[consoleplayer];
    p.mo.SetOrigin((pos.x - (Cos(forwardAngle) * 200), pos.y - (Sin(forwardAngle) * 200), pos.z + 20), true);
  }
}